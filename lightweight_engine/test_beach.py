#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–≤—É—à–∫–∏ –Ω–∞ –ø–ª—è–∂–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.engine import LightweightEngine

def test_beach_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–≤—É—à–∫–∏ –Ω–∞ –ø–ª—è–∂–µ"""
    print("=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–≤—É—à–∫–∏ –Ω–∞ –ø–ª—è–∂–µ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = LightweightEngine()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
    engine.setup()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    params = {
        'prompt': 'beautiful girl on tropical beach, summer day, blue ocean, white sand, palm trees, photorealistic, high quality',
        'negative_prompt': 'blurry, low quality, distorted',
        'width': 768,
        'height': 512,
        'steps': 15,
        'cfg_scale': 2.5,
        'seed': 123,
        'sampler_name': 'euler',
        'scheduler': 'simple',
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        'enable_hr': False,
        'adetailer_enabled': False,
        'lora_enabled': False
    }
    
    print(f"–ü—Ä–æ–º—Ç: {params['prompt']}")
    print(f"–†–∞–∑–º–µ—Ä: {params['width']}x{params['height']}")
    print(f"–®–∞–≥–∏: {params['steps']}, CFG: {params['cfg_scale']}")
    print("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        result = engine.generate(**params)
        
        if result and isinstance(result, list) and len(result) > 0:
            print("‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result)}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(result[0], 'save'):
                output_path = "beach_girl.png"
                result[0].save(output_path)
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result[0].size}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —á–µ—Ä–Ω–æ–µ
                import numpy as np
                img_array = np.array(result[0])
                mean_brightness = np.mean(img_array)
                print(f"–°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å: {mean_brightness:.2f} (0=—á–µ—Ä–Ω—ã–π, 255=–±–µ–ª—ã–π)")
                
                if mean_brightness > 20:
                    print("‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    return True
                else:
                    print("‚úó –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ")
                    return False
            
        else:
            print("‚úó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_beach_generation()
    if success:
        print("\nüèñÔ∏è –î–µ–≤—É—à–∫–∞ –Ω–∞ –ø–ª—è–∂–µ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")