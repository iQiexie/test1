#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ LoRA
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.engine import LightweightEngine

def test_simple_generation():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
    print("=== –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ LoRA ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = LightweightEngine()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
    engine.setup()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    params = {
        'prompt': 'beautiful landscape with mountains and lake, sunset, photorealistic',
        'negative_prompt': 'blurry, low quality, distorted',
        'width': 512,
        'height': 512,
        'steps': 4,
        'cfg_scale': 1.0,
        'seed': 42,
        'sampler_name': 'euler',
        'scheduler': 'simple',
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        'enable_hr': False,
        'adetailer_enabled': False,
        'lora_enabled': False
    }
    
    print(f"–ü—Ä–æ–º—Ç: {params['prompt']}")
    print(f"–†–∞–∑–º–µ—Ä: {params['width']}x{params['height']}")
    print(f"–®–∞–≥–∏: {params['steps']}, CFG: {params['cfg_scale']}")
    print("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        result = engine.generate(**params)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {type(result)}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if result and isinstance(result, list) and len(result) > 0:
            print("‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result)}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if hasattr(result[0], 'save'):
                output_path = "generated_image.png"
                result[0].save(output_path)
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result[0].size}")
                print(f"–†–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result[0].mode}")
            
            return True
        else:
            print("‚úó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print(f"result: {result}")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_simple_generation()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")