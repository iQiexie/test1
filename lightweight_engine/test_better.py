#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.engine import LightweightEngine

def test_better_generation():
    """–¢–µ—Å—Ç —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("=== –¢–µ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = LightweightEngine()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
    engine.setup()
    
    # –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Flux
    params = {
        'prompt': 'a beautiful mountain landscape at sunset, highly detailed, photorealistic',
        'negative_prompt': '',  # Flux –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å negative prompts
        'width': 1024,  # Flux –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–æ–ª—å—à–∏–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
        'height': 1024,
        'steps': 20,  # –ë–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        'cfg_scale': 3.5,  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π CFG –¥–ª—è Flux
        'seed': 12345,
        'sampler_name': 'euler',
        'scheduler': 'simple',
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        'enable_hr': False,
        'adetailer_enabled': False,
        'lora_enabled': False
    }
    
    print(f"–ü—Ä–æ–º—Ç: {params['prompt']}")
    print(f"–†–∞–∑–º–µ—Ä: {params['width']}x{params['height']}")
    print(f"–®–∞–≥–∏: {params['steps']}, CFG: {params['cfg_scale']}")
    print("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        result = engine.generate(**params)
        
        if result and isinstance(result, list) and len(result) > 0:
            print("‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result)}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(result[0], 'save'):
                output_path = "better_image.png"
                result[0].save(output_path)
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result[0].size}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —á–µ—Ä–Ω–æ–µ
                import numpy as np
                img_array = np.array(result[0])
                mean_brightness = np.mean(img_array)
                print(f"–°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å: {mean_brightness:.2f} (0=—á–µ—Ä–Ω—ã–π, 255=–±–µ–ª—ã–π)")
                
                if mean_brightness > 10:
                    print("‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —á–µ—Ä–Ω–æ–µ!")
                    return True
                else:
                    print("‚úó –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ")
                    return False
            
        else:
            print("‚úó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_better_generation()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")